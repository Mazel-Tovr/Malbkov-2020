package com.tstu.library.businesslayer;

import com.tstu.library.businesslayer.interfaces.IAdminFeatures;
import com.tstu.library.businesslayer.interfaces.ILogService;
import com.tstu.library.dao.RoleAccesses;
import com.tstu.library.dao.UserAccesses;
import com.tstu.library.dao.interfaces.ICommonOperations;
import com.tstu.library.dao.interfaces.IUserOperation;
import com.tstu.library.exception.UserException;
import com.tstu.library.model.Role;
import com.tstu.library.model.User;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.log4j.Logger;

import static com.tstu.library.exception.ExceptionsCods.*;

public class SystemExploiter implements IAdminFeatures {

    private IUserOperation userTable = new UserAccesses();

    private ICommonOperations<Role> roleTable = new RoleAccesses();

    private static final Logger logger = Logger.getLogger("BusinessLayerLogger");

    private ILogService logService = new LogServiceImpl();

    //Registration by admin
    @Override
    public void toRegister(String firstName, String lastName, String nickName, String password, int roleId) throws UserException {
        if(nickName.isEmpty() || password.isEmpty()) throw new UserException("Nick name and password can't be empty", EMPTY_FIELD_INPUT);
        String hexPassword = DigestUtils.md2Hex(password);
        if (userTable.isUserExist(nickName)) throw new UserException("User with such Nickname already exist",USER_DOES_NOT_EXIST);
        Role role = roleTable.getEntity(roleId);
        if (role == null) throw new UserException("Such role doesn't exist", ROLE_DOES_NOT_EXIST);
        long maxId = userTable.getMaxIdPlusOne();
        if(maxId < 0) throw new UserException("Max id less then 0",ENTITY_CUN_NOT_BE_ADDED_MAX_ID_NOT_RECEIVED);
        logger.debug("Register validation successfully passed");
        userTable.addNewEntity(new User(maxId,firstName, lastName, nickName, hexPassword, role,false));
        logger.info("User successfully register");
    }

    @Override
    public void blockUser(long userId) throws UserException {
        User user = userTable.getEntity(userId);
        if(user == null) throw new UserException("User with such id does't exist",USER_DOES_NOT_EXIST);
        blockUser(user);
    }

    @Override
    public void blockUser(User user) throws UserException {
        if (user.isBlocked()) throw new UserException("Current user already blocked",USER_ALREADY_BLOCKED);
        logger.debug("BlockUser validation successfully passed");
        userTable.blockUser(user);
        logService.addLog(user, "User: "+user.getNickName()+ " was blocked");
        logger.info("User successfully blocked");
    }

    @Override
    public User login(String nickName, String password) throws UserException {
        String hexPassword = DigestUtils.md2Hex(password);
        if (!userTable.isUserExist(nickName)) throw new UserException("User with such Nickname doesn't exist",USER_DOES_NOT_EXIST);
        User user = userTable.getUser(nickName, hexPassword);
        if (user == null) throw new UserException("Wrong password, try again ",WRONG_PASSWORD);
        if (user.isBlocked()) throw new UserException("you are blocked",USER_ALREADY_BLOCKED);
        logger.debug("Login validation successfully passed");
        logger.info("Your are successfully logging ");
        logService.addLog(user, "User: "+user.getNickName()+ " entered to lib");
        return user;
    }

    //Registration by user
    @Override
    public void toRegister(String firstName, String lastName, String nickName, String password) throws UserException {
        if(nickName.isEmpty() || password.isEmpty()) throw new UserException("Nick name and password can't be empty", EMPTY_FIELD_INPUT);
        String hexPassword = DigestUtils.md2Hex(password);
        if (userTable.isUserExist(nickName)) throw new UserException("User with such nickName already exist",USER_ALREADY_EXIST);
        long maxId = userTable.getMaxIdPlusOne();
        if(maxId < 0) throw new UserException("Max id less then 0",ENTITY_CUN_NOT_BE_ADDED_MAX_ID_NOT_RECEIVED);
        logger.debug("Register validation successfully passed");
        userTable.addNewEntity(new User(maxId,firstName, lastName, nickName, hexPassword, roleTable.getEntity(1),false));
        logger.info("You are successfully register");
    }
}
